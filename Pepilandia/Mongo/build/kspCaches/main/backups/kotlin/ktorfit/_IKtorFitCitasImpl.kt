// Generated by Ktorfit
package ktorfit

import de.jensklingenberg.ktorfit.Ktorfit
import de.jensklingenberg.ktorfit.`internal`.*
import de.jensklingenberg.ktorfit.http.*
import dto.*

public class _IKtorFitCitasImpl(
  private val client: KtorfitClient,
) : IKtorFitCitas {
  public override suspend fun getAllCitas(): List<CitaDto> {
    val requestData = RequestData(method="GET",
        relativeUrl="citas",
        returnTypeData=TypeData("kotlin.collections.List",listOf(TypeData("dto.CitaDto")))) 

    return client.suspendRequest<List<CitaDto>, CitaDto>(requestData)!!
  }

  public override suspend fun getCitaById(id: Int): CitaDto? {
    val requestData = RequestData(method="GET",
        relativeUrl="citas/{id}",
        returnTypeData=TypeData("CitaDto?"),
        paths = listOf(PathData("id","$id",false))) 

    return client.suspendRequest<CitaDto?, CitaDto?>(requestData)
  }

  public override suspend fun saveCita(cita: CitaCreateDto): CitaCreateDto {
    val requestData = RequestData(method="POST",
        relativeUrl="citas",
        bodyData = cita,
        returnTypeData=TypeData("dto.CitaCreateDto")) 

    return client.suspendRequest<CitaCreateDto, CitaCreateDto>(requestData)!!
  }

  public override suspend fun updateCita(cita: CitaCreateDto): CitaCreateDto {
    val requestData = RequestData(method="PUT",
        relativeUrl="citas",
        bodyData = cita,
        returnTypeData=TypeData("dto.CitaCreateDto")) 

    return client.suspendRequest<CitaCreateDto, CitaCreateDto>(requestData)!!
  }

  public override suspend fun deleteCita(id: Int): Boolean {
    val requestData = RequestData(method="DELETE",
        relativeUrl="citas/{id}",
        returnTypeData=TypeData("kotlin.Boolean"),
        paths = listOf(PathData("id","$id",false))) 

    return client.suspendRequest<Boolean, Boolean>(requestData)!!
  }
}

public fun Ktorfit.createIKtorFitCitas(): IKtorFitCitas = _IKtorFitCitasImpl(KtorfitClient(this))
